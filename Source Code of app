package com.example.myrecipeapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.myrecipeapp.ui.theme.MyRecipeAppTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            MyRecipeAppTheme {
                Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) {

                    RecipeScreen()
                }
            }
        }
    }
}



--------------------------
package com.example.myrecipeapp

data class Category(val idCategory:String,
    val strCategory:String,
    val strCategoryThumb:String,
    val strCategoryDescription:String
)

data class CategoriesResponse(val categories:List<Category>)
--------------------\
package com.example.myrecipeapp

import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
//retrofit instance
private val retrofit = Retrofit.Builder().baseUrl("https://www.themealdb.com/api/json/v1/1/")
    .addConverterFactory(GsonConverterFactory.create())
    .build()

val recipeService = retrofit.create(ApiService::class.java)
interface ApiService{
    @GET("categories.php")
    suspend fun  getCategories():CategoriesResponse
}
--------------------------
package com.example.myrecipeapp

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import coil.compose.rememberAsyncImagePainter

@Composable
    fun RecipeScreen(modifier: Modifier = Modifier)
    {
        val recipeViewModel:MainViewModel=viewModel()
        val viewstate by recipeViewModel.catergoriesState
        
        Box(modifier = Modifier.fillMaxSize())
        {
            when
            {
                viewstate.loading->{
                    CircularProgressIndicator(modifier.align(Alignment.Center))
                }
                viewstate.error!=null->{
                    Text("ERROR OCCURRED")
                }
            else ->{
            //display categories
            CategoryScreen(categories = viewstate.list)
        }
            }
        }


    }

@Composable
fun CategoryScreen(categories:List<Category>)
{
 LazyVerticalGrid(GridCells.Fixed(2), modifier = Modifier.fillMaxSize())
 {
  items(categories){
      category->
      CategoryItem(category = category)
  }
 }


}
//how each item looks like

@Composable
fun CategoryItem(category: Category){
    Column (modifier = Modifier
        .padding(8.dp)
        .fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally){
       
        Image(painter = rememberAsyncImagePainter(category.strCategoryThumb) ,
            contentDescription = null, modifier = Modifier.fillMaxSize().aspectRatio(1f))
        
        Text(
            text=category.strCategory,
            color = Color.Black,
            style = TextStyle(fontWeight = FontWeight.Bold),
            modifier = Modifier.padding(top=4.dp)
        )
        
    }


}
-------------------------
package com.example.myrecipeapp

import androidx.compose.runtime.State
import androidx.compose.runtime.mutableStateOf
//import androidx.compose.ui.tooling.data.EmptyGroup.data
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.launch

class MainViewModel : ViewModel() {
private val _categorieState = mutableStateOf(RecipeState())

val catergoriesState: State<RecipeState> = _categorieState

//function fatch categories
init {
    fetchCategories()
}


    private fun fetchCategories()
    {
        viewModelScope.launch {
          try
              {
             val response = recipeService.getCategories()
             _categorieState.value=_categorieState.value.copy(
                 list = response.categories,
                 loading = false,
                 error = null
             )


              }catch(e: Exception)
              {
                 _categorieState.value = _categorieState.value.copy(
                     loading = false,
                     error = "Error fetching Categories ${e.message}"
                 )



              }
          }

    }
    data class RecipeState(
        val loading: Boolean = true,
        val list: List<Category> = emptyList(),
        val error: String?=null
    )

}
-------------------------------
